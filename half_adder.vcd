$date
	Tue Aug 20 09:19:15 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module and3 $end
$var wire 1 ! i0 $end
$var wire 1 " i1 $end
$var wire 1 # i2 $end
$var wire 1 $ o $end
$var wire 1 % t $end
$scope module and2_0 $end
$var wire 1 ! i0 $end
$var wire 1 " i1 $end
$var wire 1 % o $end
$upscope $end
$scope module and2_1 $end
$var wire 1 # i0 $end
$var wire 1 % i1 $end
$var wire 1 $ o $end
$upscope $end
$upscope $end
$scope module half_adder_tb $end
$var wire 1 & t_carry $end
$var wire 1 ' t_sum $end
$var reg 1 ( t_a $end
$var reg 1 ) t_b $end
$scope module my_design $end
$var wire 1 * a $end
$var wire 1 + b $end
$var wire 1 & carry $end
$var wire 1 ' sum $end
$scope module g1 $end
$var wire 1 ' i0 $end
$var wire 1 * i1 $end
$var wire 1 + o $end
$upscope $end
$upscope $end
$upscope $end
$scope module mux8 $end
$var wire 8 , i [0:7] $end
$var wire 1 - j0 $end
$var wire 1 . j1 $end
$var wire 1 / j2 $end
$var wire 1 0 o $end
$var wire 1 1 t0 $end
$var wire 1 2 t1 $end
$scope module mux4_0 $end
$var wire 4 3 i [0:3] $end
$var wire 1 . j0 $end
$var wire 1 / j1 $end
$var wire 1 1 o $end
$var wire 1 4 t0 $end
$var wire 1 5 t1 $end
$scope module mux2_0 $end
$var wire 1 6 i0 $end
$var wire 1 7 i1 $end
$var wire 1 / j $end
$var wire 1 4 o $end
$upscope $end
$scope module mux2_1 $end
$var wire 1 8 i0 $end
$var wire 1 9 i1 $end
$var wire 1 / j $end
$var wire 1 5 o $end
$upscope $end
$scope module mux2_2 $end
$var wire 1 4 i0 $end
$var wire 1 5 i1 $end
$var wire 1 . j $end
$var wire 1 1 o $end
$upscope $end
$upscope $end
$scope module mux4_1 $end
$var wire 4 : i [0:3] $end
$var wire 1 . j0 $end
$var wire 1 / j1 $end
$var wire 1 2 o $end
$var wire 1 ; t0 $end
$var wire 1 < t1 $end
$scope module mux2_0 $end
$var wire 1 = i0 $end
$var wire 1 > i1 $end
$var wire 1 / j $end
$var wire 1 ; o $end
$upscope $end
$scope module mux2_1 $end
$var wire 1 ? i0 $end
$var wire 1 @ i1 $end
$var wire 1 / j $end
$var wire 1 < o $end
$upscope $end
$scope module mux2_2 $end
$var wire 1 ; i0 $end
$var wire 1 < i1 $end
$var wire 1 . j $end
$var wire 1 2 o $end
$upscope $end
$upscope $end
$scope module mux2_0 $end
$var wire 1 1 i0 $end
$var wire 1 2 i1 $end
$var wire 1 - j $end
$var wire 1 0 o $end
$upscope $end
$upscope $end
$scope module nand3 $end
$var wire 1 A i0 $end
$var wire 1 B i1 $end
$var wire 1 C i2 $end
$var wire 1 D o $end
$var wire 1 E t $end
$scope module and2_0 $end
$var wire 1 A i0 $end
$var wire 1 B i1 $end
$var wire 1 E o $end
$upscope $end
$scope module nand2_1 $end
$var wire 1 C i0 $end
$var wire 1 E i1 $end
$var wire 1 D o $end
$var wire 1 F t $end
$scope module and2_0 $end
$var wire 1 C i0 $end
$var wire 1 E i1 $end
$var wire 1 F o $end
$upscope $end
$scope module invert_0 $end
$var wire 1 F i $end
$var wire 1 D o $end
$upscope $end
$upscope $end
$upscope $end
$scope module nor3 $end
$var wire 1 G i0 $end
$var wire 1 H i1 $end
$var wire 1 I i2 $end
$var wire 1 J o $end
$var wire 1 K t $end
$scope module or2_0 $end
$var wire 1 G i0 $end
$var wire 1 H i1 $end
$var wire 1 K o $end
$upscope $end
$scope module nor2_0 $end
$var wire 1 I i0 $end
$var wire 1 K i1 $end
$var wire 1 J o $end
$var wire 1 L t $end
$scope module or2_0 $end
$var wire 1 I i0 $end
$var wire 1 K i1 $end
$var wire 1 L o $end
$upscope $end
$scope module invert_0 $end
$var wire 1 L i $end
$var wire 1 J o $end
$upscope $end
$upscope $end
$upscope $end
$scope module or3 $end
$var wire 1 M i0 $end
$var wire 1 N i1 $end
$var wire 1 O i2 $end
$var wire 1 P o $end
$var wire 1 Q t $end
$scope module or2_0 $end
$var wire 1 M i0 $end
$var wire 1 N i1 $end
$var wire 1 Q o $end
$upscope $end
$scope module or2_1 $end
$var wire 1 O i0 $end
$var wire 1 Q i1 $end
$var wire 1 P o $end
$upscope $end
$upscope $end
$scope module xnor3 $end
$var wire 1 R i0 $end
$var wire 1 S i1 $end
$var wire 1 T i2 $end
$var wire 1 U o $end
$var wire 1 V t $end
$scope module xor2_0 $end
$var wire 1 R i0 $end
$var wire 1 S i1 $end
$var wire 1 V o $end
$upscope $end
$scope module xnor2_0 $end
$var wire 1 T i0 $end
$var wire 1 V i1 $end
$var wire 1 U o $end
$var wire 1 W t $end
$scope module xor2_0 $end
$var wire 1 T i0 $end
$var wire 1 V i1 $end
$var wire 1 W o $end
$upscope $end
$scope module invert_0 $end
$var wire 1 W i $end
$var wire 1 U o $end
$upscope $end
$upscope $end
$upscope $end
$scope module xor3 $end
$var wire 1 X i0 $end
$var wire 1 Y i1 $end
$var wire 1 Z i2 $end
$var wire 1 [ o $end
$var wire 1 \ t $end
$scope module xor2_0 $end
$var wire 1 X i0 $end
$var wire 1 Y i1 $end
$var wire 1 \ o $end
$upscope $end
$scope module xor2_1 $end
$var wire 1 Z i0 $end
$var wire 1 \ i1 $end
$var wire 1 [ o $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x\
x[
zZ
zY
zX
xW
xV
xU
zT
zS
zR
xQ
xP
zO
zN
zM
xL
xK
xJ
zI
zH
zG
xF
xE
xD
zC
zB
zA
z@
z?
z>
z=
z<
z;
bz :
z9
z8
z7
z6
z5
z4
bz 3
z2
z1
z0
z/
z.
z-
bz ,
x+
0*
0)
0(
z'
0&
x%
x$
z#
z"
z!
$end
#5
1)
#10
x&
0)
1(
1*
#15
1)
